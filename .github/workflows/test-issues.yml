name: Test Issue Management

on:
  workflow_run:
    workflows: ["Tests"]
    types:
      - completed

permissions:
  issues: write
  contents: read

jobs:
  manage-test-issues:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'failure'
    steps:
      - uses: actions/checkout@v4
      
      - name: Get test results
        id: test-results
        uses: dawidd6/action-download-artifact@bf251b5aa9c2f7eeb574a96ee720e24f801b7c11
        with:
          workflow: tests.yml
          run_id: ${{ github.event.workflow_run.id }}
          name: pytest-results
          path: test-results
        continue-on-error: true

      - name: Process test results
        if: steps.test-results.outcome == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              const resultsPath = path.join(process.env.GITHUB_WORKSPACE, 'test-results', 'results.json');
              if (!fs.existsSync(resultsPath)) {
                console.log('No test results file found');
                return;
              }

              // Read test results
              const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
              if (!results.tests || !Array.isArray(results.tests)) {
                console.log('Invalid test results format');
                return;
              }
              
              // Process each failed test
              for (const test of results.tests) {
                if (test.outcome !== 'failed') continue;
                
                const testName = `${test.nodeid}`;
                const errorMessage = test.call?.longrepr || 'No error message available';
                const shortTestName = testName.split('::').pop();
                
                // Search for existing issues
                const issues = await github.rest.issues.listForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'all',
                  labels: ['tests']
                });
                
                // Find issue with matching test name in title
                const existingIssue = issues.data.find(issue => 
                  issue.title === `Test Failure: ${shortTestName}`
                );
                
                if (existingIssue) {
                  // Issue exists, reopen if closed
                  if (existingIssue.state === 'closed') {
                    await github.rest.issues.update({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: existingIssue.number,
                      state: 'open'
                    });
                  }
                  
                  // Add comment about the new failure
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: existingIssue.number,
                    body: `Test failed again in commit ${context.sha}\n\nFull test name: ${testName}\n\nError message:\n\`\`\`\n${errorMessage}\n\`\`\``
                  });
                } else {
                  // Create new issue
                  await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: `Test Failure: ${shortTestName}`,
                    body: `Test failed in commit ${context.sha}\n\nFull test name: ${testName}\n\nError message:\n\`\`\`\n${errorMessage}\n\`\`\``,
                    labels: ['tests']
                  });
                }
              }
            } catch (error) {
              console.error('Error processing test results:', error);
              core.setFailed(error.message);
            } 